(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{941:function(s,n,a){"use strict";a.r(n);var t=a(12),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"js-笔试真题-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-笔试真题-1"}},[s._v("#")]),s._v(" JS 笔试真题-1")]),s._v(" "),a("h2",{attrs:{id:"快速导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速导航"}},[s._v("#")]),s._v(" 快速导航")]),s._v(" "),a("TOC"),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("以下一些题,均来各大小公司现场的真实笔试题,所有面试题都经过笔者一一验证,如有不足之处,谢谢小可爱们指正和完善")]),s._v(" "),a("h2",{attrs:{id:"第-1-题-变量声明不会提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-1-题-变量声明不会提升"}},[s._v("#")]),s._v(" 第 1 题. 变量声明不会提升")]),s._v(" "),a("p",[s._v("直接写出下边程序的输出结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('console.log(foo);\nvar foo = "test"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("p",[s._v("答案: undefined")]),s._v(" "),a("p",[s._v("解析: 变量"),a("code",[s._v("foo")]),s._v(",相当于只有"),a("code",[s._v("var foo")]),s._v(";但是却没有赋值,所以值是"),a("code",[s._v("undefined")]),s._v(",并且变量的声明并不会提升,只有函数声明会提升")])]),s._v(" "),a("h2",{attrs:{id:"第-2-题-词法作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-2-题-词法作用域"}},[s._v("#")]),s._v(" 第 2 题 词法作用域")]),s._v(" "),a("p",[s._v("写出下面一段代码输出结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var temp = 123;\nfunction f() {\n  console.log(temp);\n  if(false) {\n    var temp = 456\n  }\n}\nf();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("p",[s._v("答案: "),a("code",[s._v("undefined")])]),s._v(" "),a("p",[s._v("解析: 在没有调用 f 函数时,"),a("code",[s._v("temp")]),s._v("的值是"),a("code",[s._v("123")]),s._v(",在查找变量时,它先会从函数内沿着作用域链逐级向外进行查找,若有则会返回,若无,则会返回"),a("code",[s._v("undefined")]),s._v(",")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("var")]),s._v("声明的变量并不会有块级作用域,在"),a("code",[s._v("if")]),s._v("语句块声明赋值的变量,相当于是裸露的,因为在 f 函数内,变量先使用,但是未赋值,所以是"),a("code",[s._v("undeifined")])])]),s._v(" "),a("h2",{attrs:{id:"第-3-题-块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-3-题-块级作用域"}},[s._v("#")]),s._v(" 第 3 题 块级作用域")]),s._v(" "),a("p",[s._v("写出下面一段代码输出的结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var temp = 123;\nfunction f() {\n  console.log(temp);\n  if(true) {\n     console.log(temp);\n     let temp = 456;\n  }\n}\nf();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看详情")]),s._v(" "),a("p",[s._v("答案: 123,然后报错"),a("code",[s._v("ReferenceError: Cannot access 'temp' before initialization")]),s._v(",无法在初始化之前访问变量")]),s._v(" "),a("p",[s._v("解析: "),a("code",[s._v("let")]),s._v("声明的变量是有块级作用域的,不能重复声明定义")])]),s._v(" "),a("h2",{attrs:{id:"第-4-题-promise-执行问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-4-题-promise-执行问题"}},[s._v("#")]),s._v(" 第 4 题-Promise 执行问题")]),s._v(" "),a("p",[s._v("写出下面一段程序的输出的结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("new Promise(resolve => {\n    console.log(1);\n    setTimeout(() => console.log(2),0)\n    Promise.resolve().then(() => console.log(3))\n    resolve();\n}).then(() => console.log(4))\nconsole.log(5)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击可查看详情")]),s._v(" "),a("p",[a("strong",[s._v("答案")]),s._v(": 1 5 3 4 2")]),s._v(" "),a("p",[s._v("解析:事件循环,任务队列的执行顺序,"),a("code",[s._v("new Promise")]),s._v("是会立即调用,接收了一个"),a("code",[s._v("resolve")]),s._v("参数,执行调用输出"),a("code",[s._v("console.log(1)")]),s._v("语句,遇到"),a("code",[s._v("setTimeout")]),s._v(",它是一个异步宏任务,会推送到任务队列中,进入挂起状态")]),s._v(" "),a("p",[s._v("而"),a("code",[s._v("promise.resove")]),s._v("也是一个异步微任务,仍然会推送到任务队列中,进入挂起状态,当主线程"),a("code",[s._v("console.log(5)")]),s._v("执行完后,在从异步任务队列中进行执行,在同一栈中,微任务要优先于宏任务的执行,所以先执行 3,然后 4,最后是 2")]),s._v(" "),a("p",[s._v("最终执行的顺序结果是:1,5,3,4,2")])]),s._v(" "),a("h2",{attrs:{id:"第-5-题-123456789-match-d-3-5-g-的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-5-题-123456789-match-d-3-5-g-的结果是什么"}},[s._v("#")]),s._v(' 第 5 题-"123456789".match(/\\d{3,5}?/g)的结果是什么?')]),s._v(" "),a("p",[s._v("正则表达式: 考察"),a("code",[s._v("match")]),s._v("的用法")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看详情")]),s._v(" "),a("p",[s._v('答案: ["123", "456", "789"]')]),s._v(" "),a("p",[a("strong",[s._v("解析")]),s._v(":")]),s._v(" "),a("p",[a("code",[s._v("match")]),s._v("方法的返回值是存放首次匹配内容的数组。如果没有找到匹配结果，返回 "),a("code",[s._v("null")])]),s._v(" "),a("p",[a("strong",[s._v("用法")]),s._v("："),a("code",[s._v("stringObject.match(searchvalue | regexp)")]),s._v("，这里介绍一下"),a("code",[s._v("regexp")]),s._v("模式")]),s._v(" "),a("p",[a("strong",[s._v("返回值")]),s._v("：存放匹配结果的数组。该数组的内容依赖于 "),a("code",[s._v("regexp")]),s._v(" 是否具有全局标志 "),a("code",[s._v("g")])]),s._v(" "),a("p",[a("strong",[s._v("使用描述")]),s._v(":")]),s._v(" "),a("p",[s._v("该"),a("code",[s._v("match()")]),s._v(" 方法将检索字符串"),a("code",[s._v("stringObject")]),s._v("，以找到一个或多个与"),a("code",[s._v("regexp")]),s._v("匹配的文本。这个方法的行为在很大程度上有赖于 "),a("code",[s._v("regexp")]),s._v("是否具有标志"),a("code",[s._v("g")])]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("regexp")]),s._v(" 没有标志 "),a("code",[s._v("g")]),s._v("，即全局匹配,那么"),a("code",[s._v("match()")]),s._v("方法就只能在"),a("code",[s._v("stringObject")]),s._v(" 中执行一次匹配")]),s._v(" "),a("p",[s._v("如果没有找到任何匹配的文本,"),a("code",[s._v("match()")]),s._v(" 将返回 "),a("code",[s._v("null")]),s._v("。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息")]),s._v(" "),a("p",[s._v("如下示例所示")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let str="itclanCoder";\nconsole.log(str.match("C"));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("输出结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('["C", index: 6, input: "itclanCoder", groups: undefined]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。 "),a("code",[s._v("index")]),s._v("属性声明的是匹配文本的起始字符在 "),a("code",[s._v("stringObject")]),s._v("中的位置，"),a("code",[s._v("input")]),s._v(" 属性声明的是对 "),a("code",[s._v("stringObject")]),s._v(" 的引用")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("regexp")]),s._v(" 具有标志 "),a("code",[s._v("g")]),s._v("，则 "),a("code",[s._v("match()")]),s._v("方法将执行全局检索，找到 "),a("code",[s._v("stringObject")]),s._v(" 中的所有匹配子字符串。")]),s._v(" "),a("p",[s._v("若没有找到任何匹配的子串，则返回 null。")]),s._v(" "),a("p",[a("strong",[s._v("如果找到了一个或多个匹配子串，则返回一个数组")]),s._v("。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 "),a("code",[s._v("stringObject")]),s._v("中所有的匹配子串，而且也没有 "),a("code",[s._v("index")]),s._v(" 属性或 "),a("code",[s._v("input")]),s._v("属性")]),s._v(" "),a("p",[a("strong",[s._v("示例")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("不带修饰符 g")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var url = \'http://www.baidu.com?a=1&b=2&c=3\';\nvar reg = /([^?&=]+)=([^?&=])*/;\nvar result = url.match(reg);\nconsole.log(result);//["a=1", "a", "1", index: 21, input: "http://www.baidu.com?a=1&b=2&c=3", groups: undefined]\nconsole.log(result.index);  // 21\nconsole.log(result.input);  // http://www.baidu.com?a=1&b=2&c=3\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("带修饰符的 g")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var url = \'http://www.baidu.com?a=1&b=2&c=3\';\nvar reg = /([^?&=]+)=([^?&=])*/g;\nvar result = url.match(reg);\nconsole.log(result);    //["a=1", "b=2", "c=3"]\nconsole.log(result.index);  //undefined\nconsole.log(result.input);  //undefined\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("有全局 g 匹配和无 g,是不一样的")])]),s._v(" "),a("p",[s._v("而在本题中的"),a("code",[s._v('"123456789".match(/\\d{3,5}?/g)')]),s._v(",从"),a("code",[s._v("123456789")]),s._v("字符传中第 3 个位置查找,结束位置在第 5 个位置,全局匹配查找,最终会返回一个数组"),a("code",[s._v("[123, 456, 789]")])]),s._v(" "),a("p",[s._v("这个"),a("code",[s._v("match")]),s._v("方法有时候会很有用,在匹配某查找一字符串参数的时候,经常在面试中,被问到,怎么将一"),a("code",[s._v("url")]),s._v("中的参数给提取出来的,此时这个方法就很有用了的")]),s._v(" "),a("h2",{attrs:{id:"第-6-题-编程将字符串-2018-11-03-转换成-11-03-2018"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-6-题-编程将字符串-2018-11-03-转换成-11-03-2018"}},[s._v("#")]),s._v(' 第 6 题-编程将字符串"2018-11-03"转换成"11/03/2018"')]),s._v(" "),a("p",[s._v("字符串中一些方法操作:"),a("code",[s._v("split")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看详情")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var str = "2018-11-03";\nvar arrs = str.split(\'-\'); // 经果 split 的分割,返回结果是一个数组,arrs 的结果为["2018", "11", "03"]\nvar result = arrs.map((item, index, arr) => {\nreturn arr[1]+\'/\'+arr[2]+\'/\'+arr[0]; // 当然也是可以通过 join 方法进行拼接的["11", "03","2018"].join(\'/\')\n})\nvar tranResult = Array.from(new Set(result)); // 数组去重.这里也可以使用拓展运算符 [...new Set(result)]\nconsole.log(tranResult[0]); // 11/03/2018\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("其中这个"),a("code",[s._v("Array.from")]),s._v("是可以将类数组格式,转化为真实的数组,经过"),a("code",[s._v("new Set()")]),s._v("后,"),a("code",[s._v("set")]),s._v("数据结构,如果不进行转化,是没有办法通过数组访问下标的方式进行访问的")]),s._v(" "),a("p",[s._v("这个"),a("code",[s._v("Array.from")]),s._v("方法不仅可以将 Set 生成数组,也可以从 "),a("code",[s._v("String中生成数组")]),s._v(",从 "),a("code",[s._v("Map")]),s._v("生成数组都是可以的,从类数组对象（arguments）生成数组,将一个类(伪)数组转换为一个真实的数组")]),s._v(" "),a("p",[s._v("具体详细使用可参考 MDN 文档"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"}},[s._v("Array.from 使用"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"第-7-题-如果浏览器不支持-bind-函数-实现一个函数让其兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-7-题-如果浏览器不支持-bind-函数-实现一个函数让其兼容"}},[s._v("#")]),s._v(" 第 7 题-如果浏览器不支持 bind 函数,实现一个函数让其兼容")]),s._v(" "),a("p",[s._v("主要考察"),a("code",[s._v("bind方法")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("作用")]),s._v(": 创建一个新的函数（称为绑定函数）, 当它被调用时，将其 "),a("code",[s._v("this")]),s._v("关键字设置为提供的值,在调用新函数时,在任何提供之前提供一个给定的参数序列")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("与 call,apply 方法区别")]),s._v(": 都是"),a("code",[s._v("Function")]),s._v("对象内置的方法,挂载在"),a("code",[s._v("Function")]),s._v("原型下共享方法,它们的第一个参数都是用来更改调用方法中 this 的指向。"),a("strong",[s._v("需要注意的是 bind 是返回新的函数，以便稍后调用")]),s._v(",它往往跟事件结合使用,只有触发了事件,才会调用,而"),a("strong",[s._v("apply 、call 则是立即调用原函数")])])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" module "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'itclanCoder'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" unboundGetName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("getName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("unboundGetName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  函数在全局范围内被调用,undefined,这里的this指向的是window,很多面试题在全局范围定义了一个var name = "川川",那么此处便会输出"川川",因为这里全局作用域内没有name,所以是undefined')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" boundGetName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("unboundGetName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过bind改变this的指向,指向module对象")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("boundGetName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// itclanCoder")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("在上面的示例代码中,将一个方法从对象中拿出来(上面的 getName 就是 module 对象下的一个方法)，然后再调用(module.getName 赋值给 unboundGetName)，总期望方法中的 "),a("code",[s._v("this")]),s._v(" 是原来的对象（在这里指的是 module 对象，比如在回调中传入这个方法）。")]),s._v(" "),a("p",[s._v("如果不做特殊处理的话，一般会丢失原来的对象。基于这个函数，用原始的对象创建一个绑定函数，巧妙地解决了这个问题(上面使用 bind 后就解决了这个问题,让 this 指向了 module 对象)")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("语法")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 所要改变的this指向的那个函数.bind(thisArg[, arg1[, arg2[, ...]]])\nfunction.bind(thisArg[, arg1[, arg2[, ...]]])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[a("p",[a("strong",[s._v("thisArg")]),s._v(": 当绑定函数被调用时，该参数会作为 this 的指向。当使用 new 操作符调用绑定函数时，该参数无效，会被忽略,当使用 "),a("code",[s._v("bind")]),s._v("在 "),a("code",[s._v("setTimeout")]),s._v("中创建一个函数（作为回调提供）时，作为 "),a("code",[s._v("thisArg")]),s._v(" 传递的任何原始值都将转换为"),a("code",[s._v("object")]),s._v("。如果 bind 函数的参数列表为空，或者 thisArg 是 null 或 undefined，执行作用域的 this 将被视为新函数的 thisArg")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("arg1, arg2")]),s._v(": 当目标函数被调用时，被预置入绑定函数的参数列表中的参数")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("返回值")]),s._v(":")])])]),s._v(" "),a("p",[s._v("返回一个原函数的拷贝，并拥有指定的 this 值和初始参数")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("应用场景 1")]),s._v(":可以对一个函数预设初始参数")])]),s._v(" "),a("p",[s._v("只要将这些参数（如果有的话）作为 bind() 的参数写在 this 后面。当绑定函数被调用时，这些参数会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们后面,如下所示")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function list() {\n  return Array.prototype.slice.call(arguments);  // 将类数组转换成真正的数组\n}\n\nfunction addArguments(arg1, arg2) {\n    return arg1 + arg2\n}\n\nvar list1 = list(1, 2, 3); // [1, 2, 3]\nvar result1 = addArguments(1, 2); // 3\n\n// 创建一个函数，它拥有预设参数列表。\nvar leadingThirtysevenList = list.bind(null, 37);\n\n// 创建一个函数，它拥有预设的第一个参数\nvar addThirtySeven = addArguments.bind(null, 37);\n\nvar list2 = leadingThirtysevenList(); // [37]\nvar list3 = leadingThirtysevenList(1, 2, 3); // [37, 1, 2, 3]\nvar result2 = addThirtySeven(5); // 37 + 5 = 42\nvar result3 = addThirtySeven(5, 10);// 37 + 5 = 42 ，第二个参数会被忽略\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("应用场景 2")]),s._v(": 与"),a("code",[s._v("setTimeout")]),s._v("一起使用")])]),s._v(" "),a("p",[s._v("在默认情况下，使用 "),a("code",[s._v("window.setTimeout()")]),s._v("时,此时"),a("code",[s._v("this")]),s._v("关键字会指向 "),a("code",[s._v("window")]),s._v(" （或 "),a("code",[s._v("global")]),s._v("）对象。当类的方法中需要 "),a("code",[s._v("this")]),s._v("指向类的实例时,你可能需要显式地把"),a("code",[s._v("this")]),s._v("绑定到回调函数，这样就不会丢失该实例的引用")]),s._v(" "),a("p",[s._v("也就是说,当使用类的方法时需要"),a("code",[s._v("this")]),s._v("指向类实例，就可以使用"),a("code",[s._v("bind()")]),s._v("将 this 绑定到回调函数来管理实例")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看详情")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Bloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n// 在 1 秒钟后声明 bloom\nBloomer.prototype.bloom = function() {\n  window.setTimeout(this.declare.bind(this), 1000); // 这里的this原本指向window,但是通过bind方法后,指向Bloomer\n};\n\nBloomer.prototype.declare = function() {\n  console.log('我有 ' + this.petalCount + ' 朵花瓣!');\n};\n\nvar flower = new Bloomer();\nflower.bloom();   // 1秒后输出 我有 11 朵花瓣\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("对于事件处理函数和 setInterval 方法也可以使用上面的方法")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("应用场景 3")]),s._v(":绑定函数作为构造函数")])]),s._v(" "),a("p",[s._v("绑定函数也适用于使用"),a("code",[s._v("new操作符")]),s._v("来构造目标函数的实例。当使用绑定函数来构造实例")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("this 会被忽略，但是传入的参数仍然可用")])]),s._v(" "),a("p",[s._v("如下实例代码所示")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Point(x, y) {   // 声明构造器Point函数\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function() {   // 构造器Point方法原型下添加toString\n  return this.x + ',' + this.y;\n};\n\nvar p = new Point(1, 2);\np.toString(); // '1,2'\n\n\nvar emptyObj = {};\nvar YAxisPoint = Point.bind(emptyObj, 0/*x*/);\n// 实现中的例子不支持,\n// 原生bind方法支持\nvar YAxisPoint = Point.bind(null, 0/*x*/);\n\nvar axisPoint = new YAxisPoint(5);\naxisPoint.toString(); // '0,5'\n\naxisPoint instanceof Point; // true,axisPoint是Point的实例化出来的一对象\naxisPoint instanceof YAxisPoint; // true,axisPoint是YAxisPoint实例化出来的一对象\nnew Point(17, 42) instanceof YAxisPoint; // true // 同上\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])])]),s._v(" "),a("p",[s._v("在上面的示例代码中,"),a("code",[s._v("Point")]),s._v("和"),a("code",[s._v("YAxisPoint")]),s._v("是共享原型对象，因此使用 instanceof 运算符判断时为 true")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("应用场景 4")]),s._v(":快捷调用-将类数组对象转换为真实的数组")])]),s._v(" "),a("p",[a("code",[s._v("bind()")]),s._v("也可以为需要特定 this 值的函数创造捷径")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var slice = Array.prototype.slice;\n\nslice.call(arguments);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果使用 bind()的话，情况变得更简单")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// // 与前一段代码的 "slice" 效果相同,下面使用了bind\nvar unboundSlice = Array.prototype.slice;\nvar slice = Function.prototype.call.bind(unboundSlice);\n\nslice(arguments);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("在上面的示例代码中,"),a("code",[s._v("bind()")]),s._v("有很多的使用场景,但是 bind()函数是在 ECMA-262 第五版才被加入；它可能无法在所有浏览器上运行。这就需要我们自己实现 bind()函数了,在面试题中,可以说是屡见不爽,屡见屡面")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("方法 1")]),s._v(": 模拟实现 bind 方法")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看实现模拟 bind 方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  //在Function的原型上自定义myBind()方法\n  Function.prototype.myBind = function myBind(context){\n       //获取要操作的函数\n       var _this=this;\n       //获取实参（context除外）\n      var args=Array.prototype.slice.call(arguments,1);\n      //判断当前浏览器是否兼容bind()方法\n     if('bind' in Function.prototype){\n         //如果浏览器兼容bind()方法，则使用bind()方法，并返回bind()方法执行后的结果\n         return _this.bind(context,args);\n      }\n      //如果不兼容bind()方法，则返回一个匿名函数\n      return function(){\n           _this.apply(context,args);\n       }\n }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("自建 bind 函数来给一个对象绑定事件")])]),s._v(" "),a("li",[a("strong",[s._v("思路")]),s._v(": 三个参数分别是 "),a("code",[s._v("对象")]),s._v("，"),a("code",[s._v("事件")]),s._v("，"),a("code",[s._v("回调函数")])]),s._v(" "),a("li",[a("strong",[s._v("兼容性")]),s._v(": 通过 if 判断对象是否存在"),a("code",[s._v("addEventListener方法")]),s._v("来区分浏览器,当然也可以跟上面一样通过"),a("code",[s._v("bind")]),s._v("是不是"),a("code",[s._v("Function")]),s._v("下的原型对象")]),s._v(" "),a("li",[a("strong",[s._v("this 问题的解决")]),s._v(":由于传入的回调函数是浏览器调用的，我们是无法去直接操作的，所以我们在"),a("code",[s._v("attachEvent()")]),s._v("不直接传入回调函数，而是先定义一个匿名函数，然后在函数内部调用回调函数，并利用 call 方法改变 this")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<!DOCTYPE html>\n <html>\n      <head>\n          <meta charset="UTF-8">\n          <title></title>\n          <script type="text/javascript">\n            window.onload = function() {\n                  var btn1 = document.getElementById("btn1");\n                  bind(btn1, "click", function() {\n                     alert(this);\n                 });\n             };\n             //定义一个函数bind()，用来为指定元素绑定事件响应函数\n             /*\n             * 参数：\n              *  obj 要绑定事件的对象\n              *  eventStr 事件的字符串\n              *  func 回调函数\n              */\n             function bind(obj, eventStr, func) {\n                 //判断是否有addEventListener()方法\n                 if(obj.addEventListener) {\n                     //大部分浏览器兼容的方式,addEventListener是标准浏览器支持的\n                     obj.addEventListener(eventStr, func, false);\n                 } else {\n                      //IE8及以下,注意使用的是on,绑定事件使用的是attachEvent\n                     //obj.attachEvent("on"+eventStr, func);//此方法this为window下面提供解决方法\n                     //统一this 不直接调用func而是在匿名函数内调用\n                     obj.attachEvent("on" + eventStr, function() {\n                         //在匿名函数内调用回调函数 利用call()方法将this改为obj\n                         func.call(obj);\n                     });\n                 }\n             };\n         <\/script>\n     </head>\n     <body>\n        <button id="btn1">btn1</button>\n    </body>\n</html>\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[s._v("MDN 中 bind 使用相关介绍"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"第-8-题-简单实现一下对象的深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-8-题-简单实现一下对象的深拷贝"}},[s._v("#")]),s._v(" 第 8 题-简单实现一下对象的深拷贝")]),s._v(" "),a("p",[a("strong",[s._v("考察点")]),s._v(":基本数据类型的拷贝是赋值,而对象复杂数据类型的拷贝是赋止\n"),a("strong",[s._v("解决")]),s._v(": 递归实现深拷贝")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/*\n  *  *\n  *  @description:把一个对象递归拷贝给另外一个对象\n  *  源对象与拷贝后的对象没有引用关系,实现克隆\n  *  @params {obj2} obj2为被拷贝的对象\n  *  @return {obj} obj为最终拷贝出来的对象\n  *  @author itclanCoder\n  *  */\nfunction deepCopy(obj2){    // 递归函数\n    var obj =  isArray(obj2)?[]:{}; // 判断被拷贝对象是数组还是对象,如果不考虑数组的话,会出现一些问题,如果被拷贝对象里面有数组对象的话,会把数组变为对象,如果传进来是一个数组的话,就让它是一个数组的,是一个对象就是一个对象的\n    // 取出obj2的所有属性,如果当前拷贝的数据还是一个对象的话,那么继续调用,deepCopy进行二次拷贝，递归\n    for(var property in obj2){\n        if(isObject(obj2[property])){\n            obj[property] = deepCopy(obj2[property])  // 递归\n        }else{\n            obj[property] =  obj2[property]\n        }\n    }\n    return obj;\n}\n\n// 判断一个值是不是数组\nfunction isArray(val){\n    return Object.prototype.toString.call(val) === '[object Array]';\n    // 这里直接用Es6中的Array.isArray()方法判断是不是数组也是可以的,但是上面那种是一些标准库的常见用法\n}\n// 判断是不是对象\nfunction isObject(val){\n    return typeof val ==='object' && val !== null;\n}\nvar obj1 = {x: 1, y: 2, z: { a:3, b: 4}}\nvar obj2 = deepCopy(obj1);\nobj2.x = 100；\nobj2.z.a = 200;\nconsole.log(obj1, obj2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])])]),s._v(" "),a("p",[s._v("具体与浅拷贝-深拷贝,可参考文章\n"),a("a",{attrs:{href:"/fontend/js/shallow-vs-deep-copy"}},[s._v("JavaScript 中的浅拷贝 VS 深拷贝")])]),s._v(" "),a("h2",{attrs:{id:"第-9-题-实现一个数组的快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-9-题-实现一个数组的快速排序"}},[s._v("#")]),s._v(" 第 9 题-实现一个数组的快速排序")]),s._v(" "),a("p",[a("strong",[s._v("原理")]),s._v(":取出数组的中间项,然后把数组剩下的每一项与该项进行比较")]),s._v(" "),a("p",[s._v("如果小于该项就放在该项的左边,大于该项就放在该项的右边,再分别把左边的项和右边的项的中间项取出")]),s._v(" "),a("p",[s._v("重复上面的步骤到项数小于等于 1 为止,最后把所获得的项进行拼接")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var ary = [21,8,4,32,5];\nfunction quickSort(ary){\n   if(ary.length<=1){\n\t   return ary;\n   }\n\n   var num = Math.floor(ary.length/2);\n   var numValue = ary.splice(num,1)[0];\n   var left = [];\n   var right = [];\n   for(var i = 0;i<ary.length;i++){\n       var cur = ary[i];\n       if(cur<numValue){\n\t\t      left.push(cur);\n       }else{\n\t\t      right.push(cur);\n       }\n   }\n   return quickSort(left).concat([numValue],quickSort(right))\n}\nconsole.log(quickSort(ary));\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"第-10-题-实现一个数组的插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-10-题-实现一个数组的插入排序"}},[s._v("#")]),s._v(" 第 10 题-实现一个数组的插入排序")]),s._v(" "),a("p",[a("strong",[s._v("原理")]),s._v(":取出数组的第一项放到新数组里,让剩余的每一项与新数组的每一项进行比较,小的放左边,大的放右边")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var ary = [21,8,4,32,5];\nfunction insertSort(ary){\n  var left = ary.splice(0,1);\n  for(var i = 0;i<ary.length;i++){\n\tvar cur = ary[i];\n       for(var j = left.length-1;j>=0;){\n          var nex = left[j];\n          if(cur<nex){\n\t\t          j--;\n          if(j===-1){\n\t\t\t        left.unshift(cur);\n         }\n       }else {\n            left.splice(j+1,0,cur);\n            break;\n       }\n    }\n  }\n  return left;\n}\nconsole.log(insertSort(ary));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"第-11-题-实现一个数组的冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-11-题-实现一个数组的冒泡排序"}},[s._v("#")]),s._v(" 第 11 题-实现一个数组的冒泡排序")]),s._v(" "),a("p",[a("strong",[s._v("原理")]),s._v(":从第一项开始,与它后面的每一项进行比较,如果大于后面的项,则交换位置")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var ary = [43,5,82,21];\nfunction buddleSort(data){\n   var temp = "";\n   for(var i = data.length;i>0;i--){\n       for(var j = 0;j<i-1;j++){\n\t\t     if(data[j]>data[j+1]){\n\t\t\t\t    temp = data[j];\n            data[j] = data[j+1];\n            data[j+1] = temp;\n          }\n       }\n   }\n   return data;\n}\nconsole.log(buddleSort(ary));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"第-12-题-以下结果是-false-的选项有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-12-题-以下结果是-false-的选项有哪些"}},[s._v("#")]),s._v(" 第 12 题 以下结果是 false 的选项有哪些")]),s._v(" "),a("p",[s._v("考察点:条件表达式中,有哪些结果值是 false 的")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("A. 0 == ''            // true\nB. null == undefined  // true\nC: NaN == NaN         // false\nD: 0.1+0.2 === 0.3    // false\nE: {} == []           // 报错\nF: !{}                // false\nG: !0                 // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("点击即可查看")]),s._v(" "),a("p",[s._v("答案: C D F")])]),s._v(" "),a("p",[s._v("关于表达式的真假问题可以参考"),a("a",{attrs:{href:"/fontend/js/choice-statement"}},[s._v("Js 之选择控制语句及很重要的表达式真与假")])]),s._v(" "),a("h2",{attrs:{id:"在线测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在线测试"}},[s._v("#")]),s._v(" 在线测试")]),s._v(" "),a("iframe-lineTestCode"),s._v(" "),a("footer-FooterLink",{attrs:{isShareLink:!0,isDaShang:!0}})],1)}),[],!1,null,null,null);n.default=e.exports}}]);